# Generated by Django 4.2.7 on 2023-11-20 16:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("shops", "0001_initial"),
        ("products", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="review",
            name="user",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name="productimage",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="images",
                to="products.product",
                verbose_name="продукт",
            ),
        ),
        migrations.AddField(
            model_name="productdetail",
            name="detail",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="product_value", to="products.detail"
            ),
        ),
        migrations.AddField(
            model_name="productdetail",
            name="product",
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="products.product"),
        ),
        migrations.AddField(
            model_name="product",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="products.category", verbose_name="категория товаров"
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="details",
            field=models.ManyToManyField(
                through="products.ProductDetail", to="products.detail", verbose_name="характеристики"
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="manufacturer",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="products.manufacturer", verbose_name="производитель"
            ),
        ),
        migrations.AddField(
            model_name="product",
            name="tags",
            field=models.ManyToManyField(blank=True, related_name="products", to="products.tag", verbose_name="теги"),
        ),
        migrations.AddField(
            model_name="category",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="products.category",
                verbose_name="родитель",
            ),
        ),
        migrations.AddField(
            model_name="banner",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="products.category",
                verbose_name="категория товаров",
            ),
        ),
        migrations.AddField(
            model_name="banner",
            name="offer",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="shops.offer",
                verbose_name="предложение магазина",
            ),
        ),
        migrations.AddField(
            model_name="banner",
            name="product",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="products.product",
                verbose_name="товар",
            ),
        ),
        migrations.AddConstraint(
            model_name="productdetail",
            constraint=models.UniqueConstraint(fields=("product", "detail"), name="unique_product_detail"),
        ),
        migrations.AddConstraint(
            model_name="banner",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("category__isnull", False), ("offer__isnull", True), ("product__isnull", True)),
                    models.Q(("category__isnull", True), ("offer__isnull", True), ("product__isnull", False)),
                    models.Q(("category__isnull", True), ("offer__isnull", False), ("product__isnull", True)),
                    _connector="OR",
                ),
                name="category_or_product_or_offer",
                violation_error_message="Должно быть заполнено только одно поле.",
            ),
        ),
    ]
